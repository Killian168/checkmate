name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install test dependencies
        run: |
          cargo install cargo-llvm-cov
          cargo install cargo-nextest

      - name: Run unit tests
        run: cargo test --workspace --lib --bins

      - name: Run integration tests
        run: cargo test --workspace --test '*' -- --test-threads=1

      - name: Run E2E tests
        run: |
          if [ "${{ matrix.toolchain }}" = "stable" ]; then
            echo "Starting E2E tests..."
            # Deploy dev stack first
            npm run deploy:dev || echo "Dev deployment might already be running"
            # Run E2E tests against dev stack
            cargo run --bin test-runner -- --e2e
          else
            echo "Skipping E2E tests on nightly toolchain"
          fi

      - name: Run benchmarks
        run: |
          if [ "${{ matrix.toolchain }}" = "nightly" ]; then
            cargo bench --workspace -- --verbose
          else
            echo "Skipping benchmarks on stable toolchain"
          fi

      - name: Generate test coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Check documentation
        run: cargo doc --workspace --no-deps

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit dependencies
        run: cargo audit

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-lambda
        run: cargo install cargo-lambda

      - name: Build all packages
        run: cargo lambda build --workspace --release

      - name: Build test runner
        run: cargo build --bin test-runner --release

      - name: Verify binary sizes
        run: |
          echo "Binary sizes:"
          find target/lambda -name "*.zip" -exec ls -lh {} \;
          find target/release -maxdepth 1 -type f -executable -exec ls -lh {} \;

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly

      - name: Run performance benchmarks
        run: cargo bench --workspace -- --verbose

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion/
          retention-days: 30

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()

    steps:
      - name: Notify Slack on failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#ci-notifications"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()
