service: checkmate
frameworkVersion: "4"

provider:
  name: aws
  runtime: provided.al2023
  architecture: arm64
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  tracing:
    lambda: false
  httpApi:
    cors: true
    authorizers:
      httpAuthorizer:
        type: jwt
        scopes: email
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}
        audience:
          - !Ref CognitoUserPoolClient
  websocketApiRouteSelectionExpression: $request.body.action

package:
  individually: true
  patterns:
    - "!./**"

functions:
  api:
    handler: api-bootstrap
    package:
      artifact: target/lambda/api-bootstrap/api.zip
    events:
      - httpApi:
          method: GET
          path: /health
      - httpApi:
          method: GET
          path: /users/me
          authorizer: httpAuthorizer
      - httpApi:
          method: DELETE
          path: /users/me
          authorizer: httpAuthorizer
    environment:
      USERS_TABLE: !Ref UsersTable
      COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - cognito-idp:AdminDeleteUser
        Resource: !GetAtt CognitoUserPool.Arn

  create-user:
    handler: create-user
    package:
      artifact: target/lambda/create-user/create-user.zip
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
    events:
      - cognitoUserPool:
          pool: ${self:service}-${self:provider.stage}-user-pool
          trigger: PostConfirmation

  websocket-authorizer:
    handler: websocket-authorizer
    package:
      artifact: target/lambda/websocket-authorizer/websocket-authorizer.zip
    environment:
      JWKS_URL: !Sub "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
      COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      ISSUER: !Sub "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"

  websocket-handler:
    handler: websocket-handler
    package:
      artifact: target/lambda/websocket-handler/websocket-handler.zip
    environment:
      QUEUE_TABLE: !Ref QueueTable
      CONNECTIONS_TABLE: !Ref ConnectionsTable
      USERS_TABLE: !Ref UsersTable
      WEBSOCKET_API_ENDPOINT: !Sub "https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: !GetAtt QueueTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: !GetAtt ConnectionsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*
    events:
      - websocket:
          route: $connect
          authorizer:
            name: websocket-authorizer
            identitySource:
              - route.request.header.Authorization
      - websocket:
          route: $disconnect
      - websocket:
          route: join_queue
      - websocket:
          route: leave_queue
      - websocket:
          route: $default

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        PreventUserExistenceErrors: ENABLED
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users-table
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S

    QueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-queue-table
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: queue_key
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: queue_key
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-connections-table
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: connection_id
            AttributeType: S
