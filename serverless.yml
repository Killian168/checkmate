org: killian168
service: checkmate
frameworkVersion: "4"

provider:
  name: aws
  region: ${opt:region, 'eu-west-1'}
  memorySize: 128
  architecture: arm64
  runtime: provided.al2023
  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
        audience: !Ref UserPoolClient
  iam:
    role:
      statements: # ToDo: Tighten this up
        - Effect: Allow
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:*/*/@connections/*"

package:
  individually: true

functions:
  api:
    name: ${self:service}-${sls:stage}-api
    handler: api
    package:
      artifact: target/lambda/api/api.zip
    events:
      - httpApi:
          path: /health
          method: GET
      - httpApi:
          path: /queue/join
          method: POST
          authorizer: cognitoAuthorizer
      - httpApi:
          path: /queue/leave
          method: POST
          authorizer: cognitoAuthorizer
    reservedConcurrency: 20
    environment:
      USERS_TABLE: !Ref UsersTable
      QUEUE_TABLE: !Ref QueueTable

  queue-processor:
    name: ${self:service}-${sls:stage}-queue-processor
    handler: queue-processor
    package:
      artifact: target/lambda/queue-processor/queue-processor.zip
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt QueueTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          filterPatterns:
            - eventName: [INSERT]
    environment:
      QUEUE_TABLE: !Ref QueueTable
      GAME_SESSIONS_TABLE: !Ref GameSessionsTable

  websocket-api:
    name: ${self:service}-${sls:stage}-websocket-api
    handler: websocket-api
    package:
      artifact: target/lambda/websocket-api/websocket-api.zip
    events:
      - websocket:
          route: $connect
          authorizer: cognitoAuthorizer
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: make_move
    environment:
      PLAYER_CONNECTIONS_TABLE: !Ref PlayerConnectionsTable

  game-session-notifier:
    name: ${self:service}-${sls:stage}-game-session-notifier
    handler: game-session-notifier
    package:
      artifact: target/lambda/game-session-notifier/game-session-notifier.zip
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt GameSessionsTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          filterPatterns:
            - eventName: [INSERT]
    environment:
      GAME_SESSIONS_TABLE: !Ref GameSessionsTable
      PLAYER_CONNECTIONS_TABLE: !Ref PlayerConnectionsTable

  user-signup:
    name: ${self:service}-${sls:stage}-user-signup
    handler: user-signup
    package:
      artifact: target/lambda/user-signup/user-signup.zip
    events:
      - cognitoUserPool:
          pool: !Ref UserPool
          trigger: PostConfirmation
    environment:
      USERS_TABLE: !Ref UsersTable

  user-delete:
    name: ${self:service}-${sls:stage}-user-delete
    handler: user-delete
    package:
      artifact: target/lambda/user-delete/user-delete.zip
    events:
      - eventBridge:
          pattern:
            source:
              - aws.cognito-idp
            detail-type:
              - User Deleted
            detail:
              userPoolId:
                - !Ref UserPool
    environment:
      USERS_TABLE: !Ref UsersTable

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    QueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-queue
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: queue_rating
            AttributeType: S
          - AttributeName: player_id
            AttributeType: S
        KeySchema:
          - AttributeName: queue_rating
            KeyType: HASH
          - AttributeName: player_id
            KeyType: RANGE

    GameSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-game-sessions
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: session_id
            AttributeType: S
          - AttributeName: player1_id
            AttributeType: S
          - AttributeName: player2_id
            AttributeType: S
        KeySchema:
          - AttributeName: session_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GSI_GameSessionByPlayer1
            KeySchema:
              - AttributeName: player1_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: GSI_GameSessionByPlayer2
            KeySchema:
              - AttributeName: player2_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PlayerConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-player-connections
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: player_id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: player_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GSI_ConnectionByConnectionId
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-user-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolId
    UserPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolClientId
